import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import ttest_ind
import numpy as np

st.set_page_config(layout='centered', page_title='Dashboard by Alexey Shevchenko', page_icon="üìà")
st.set_option('deprecation.showPyplotGlobalUse', False)

def preparing_data_if_error_loading(filename):
    '''
    –î–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ —è —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å —Ç–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö ->
    UnicodeDecodeError: 'utf-8' codec can't decode byte 0xca in position 1: invalid continuation byte

    –≠—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞—á–∞–ª–µ notebook. –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤ —Ç–∞–∫–æ–º –∏–º–µ–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —É –º–µ–Ω—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ 
    –±—É–¥–µ—Ç –≤ —Ñ—É–Ω–∫—Ü–∏–∏ load_data –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –Ω–∞:
        pd.read_csv(filename, sep=",")
    '''
    data = pd.read_csv(filename, sep = ",", encoding='windows-1251')
    data["sep"] = data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π,\"–í–æ–∑—Ä–∞—Å—Ç\",\"–ü–æ–ª\""].str.split(",")
    col = []
    age = []
    sex = []

    for i in range(data.shape[0]):
        rowSep = data.iloc[i]["sep"]
        col.append(int(rowSep[0]))
        age.append(int(rowSep[1]))
        sex.append(rowSep[2][1])
        data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π"] = pd.Series(col)
        data["–í–æ–∑—Ä–∞—Å—Ç"] =  pd.Series(age)
        data["–ü–æ–ª"] =  pd.Series(sex)

    data = data.drop(["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π,\"–í–æ–∑—Ä–∞—Å—Ç\",\"–ü–æ–ª\"", "sep"], axis=1)
    return data

# Download data
@st.cache_data
def load_data(filename):
    data = preparing_data_if_error_loading(filename) # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–º–µ–µ—Ç—Å—è
    # data = data.drop("Unnamed: 0", axis=1) # –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ç
    return data

data_file = st.file_uploader("Upload CSV", type="csv")
if data_file:
    with st.sidebar:
        st.header("–í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        medical_days = st.text_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π", "2")
        age = st.text_input("–í–æ–∑—Ä–∞—Å—Ç", "35")

    medical_days = int(medical_days)
    age = int(age)

    st.subheader("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
    st.write("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π:", medical_days)
    st.write("–í–æ–∑—Ä–∞—Å—Ç:", age)

    data = load_data(data_file)
    data.rename(columns={'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π': 'medical_days', '–í–æ–∑—Ä–∞—Å—Ç': 'age', '–ü–æ–ª': 'sex'}, inplace=True)

    st.write("* –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    st.table(data.head())
    st.write("* –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
    st.dataframe(data.describe())
    number_data = data.drop('sex', axis=1)
    st.write(f"–î–∏—Å–ø–µ—Ä—Å–∏—è –ø–æ —Ä–∞–±–æ—á–∏–º –¥–Ω—è–º: {round(number_data.var()[0], 2)}")
    st.write(f"–î–∏—Å–ø–µ—Ä—Å–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É: {round(number_data.var()[1], 2)}")
    st.write(f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –≤–µ–ª–∏—á–∏–Ω: {round(number_data.corr().iloc[0,1], 2)}")
    st.write("–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏: 0.05")

    st.header(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ 1 –≥–∏–ø–æ—Ç–µ–∑—ã: –ú—É–∂—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –±–æ–ª–µ–µ {medical_days} —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ –±–æ–ª–µ–∑–Ω–∏ –∑–Ω–∞—á–∏–º–æ —á–∞—â–µ –∂–µ–Ω—â–∏–Ω.")

    N1, N2 = data.sex.value_counts()
    st.write(f"* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É–∂—á–∏–Ω: {N1}")
    st.write(f"* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–Ω—â–∏–Ω: {N2}")

    bins = np.arange(0, 10, 1)
    plt.figure(figsize=(8, 6))
    sns.histplot(data=data, x='medical_days', hue='sex', kde=True, bins=bins)
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –ø–æ –ø–æ–ª—É')
    st.pyplot()

    sns.histplot(
        data[data.sex == '–ú'].medical_days, bins=bins,
        color='blue', alpha=0.5, label='M', stat='probability', kde=True)
    sns.histplot(
        data[data.sex == '–ñ'].medical_days, bins=bins,
        color='orange', alpha=0.5, label='–ñ', stat='probability', kde=True)
    plt.legend(loc=1)
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ –ø–æ–ª—É')
    st.pyplot()

    t_statistic, p_value = ttest_ind(
        data[(data.sex == '–ú') & (data.medical_days > medical_days)].medical_days,
        data[(data.sex == '–ñ') & (data.medical_days > medical_days)].medical_days,
        equal_var=False,
        alternative='less'
    )

    st.write(f'* –ì–∏–ø–æ—Ç–µ–∑–∞ 1: –ú—É–∂—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –±–æ–ª–µ–µ {medical_days} —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ –±–æ–ª–µ–∑–Ω–∏ –∑–Ω–∞—á–∏–º–æ —á–∞—â–µ –∂–µ–Ω—â–∏–Ω.')
    st.write('p-value:', p_value)
    st.write('  statistic:', t_statistic)

    st.write("–û—Ç–≤–µ—Ä–≥–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É, —Ç–∞–∫ –∫–∞–∫ p_value –º–µ–Ω—å—à–µ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ 0.05" if p_value >= 0.05 else "–ü—Ä–∏–Ω–∏–º–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É, —Ç–∞–∫ –∫–∞–∫ p_value –±–æ–ª—å—à–µ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ 0.05")

    st.header(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ 2 –≥–∏–ø–æ—Ç–µ–∑—ã: –†–∞–±–æ—Ç–Ω–∏–∫–∏ —Å—Ç–∞—Ä—à–µ {age} –ª–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –±–æ–ª–µ–µ {medical_days} —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (medical_days) –ø–æ –±–æ–ª–µ–∑–Ω–∏ –∑–Ω–∞—á–∏–º–æ —á–∞—â–µ —Å–≤–æ–∏—Ö –±–æ–ª–µ–µ –º–æ–ª–æ–¥—ã—Ö –∫–æ–ª–ª–µ–≥.")

    data["age_type"] = ['old' if x > age else 'young' for x in data['age']]

    N3, N4 = data.age_type.value_counts()
    st.write(f"* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å—Ç–∞—Ä—à–µ {age} –ª–µ—Ç: {N3}")
    st.write(f"* –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –º–ª–∞–¥—à–µ {age} –ª–µ—Ç: {N4}")

    sns.boxplot(x='age', y='medical_days', data=data)
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É')
    st.pyplot()

    plt.figure(figsize=(8, 6))
    sns.histplot(data=data, hue='age_type', x='medical_days', kde=True)
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ')
    st.pyplot()

    sns.histplot(
        data[data.age_type == 'old'].medical_days, bins=bins,
        color='blue', alpha=0.5, label='Old', stat='probability', kde=True)
    sns.histplot(
        data[data.age_type == 'young'].medical_days, bins=bins,
        color='orange', alpha=0.5, label='Young', stat='probability', kde=True)
    plt.legend(loc=1)
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ')
    st.pyplot()

    t_statistic, p_value = ttest_ind(
        data[(data.age_type == 'old') & (data.medical_days > medical_days)].medical_days,
        data[(data.age_type == 'young') & (data.medical_days > medical_days)].medical_days,
        equal_var=False,
        alternative='less'
    )

    st.write(f'–ì–∏–ø–æ—Ç–µ–∑–∞ 2: –†–∞–±–æ—Ç–Ω–∏–∫–∏ —Å—Ç–∞—Ä—à–µ {age} –ª–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –±–æ–ª–µ–µ {medical_days} —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ –±–æ–ª–µ–∑–Ω–∏ –∑–Ω–∞—á–∏–º–æ —á–∞—â–µ —Å–≤–æ–∏—Ö –±–æ–ª–µ–µ –º–æ–ª–æ–¥—ã—Ö –∫–æ–ª–ª–µ–≥.')
    st.write('p-value:', p_value)
    st.write('statistic:', t_statistic)

    st.write("–û—Ç–≤–µ—Ä–≥–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É, —Ç–∞–∫ –∫–∞–∫ p_value –º–µ–Ω—å—à–µ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ 0.05" if p_value >= 0.05 else "–ü—Ä–∏–Ω–∏–º–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É, —Ç–∞–∫ –∫–∞–∫ p_value –±–æ–ª—å—à–µ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ 0.05")


